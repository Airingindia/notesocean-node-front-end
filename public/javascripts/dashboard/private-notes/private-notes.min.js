$(document).ready(function () {
	function loaddata() {
		$.ajax({
			type: "GET",
			url: app.getApi() + "/notes",
			headers: { Authorization: decodeURIComponent(getCookie("token")) },
			beforeSend: function () {
				$(".loading-private-notes").removeClass("d-none");
			},
			success: function (data) {
				showData(data.requested), $(".total-notes").html(data.size);
			},
			error: function (err) {
				401 == err.status
					? (window.location = "/session-expire")
					: 500 == err.status
					? new Noty({
							theme: "sunset",
							type: "error",
							text: "Internal Server Error",
							timeout: 4e3,
					  }).show()
					: 0 == err.status
					? new Noty({
							theme: "sunset",
							type: "error",
							text: "Server is not responding",
							timeout: 4e3,
					  }).show()
					: new Noty({
							theme: "sunset",
							type: "error",
							text: "Failed to load notes, somthing went wrong",
							timeout: 4e3,
					  }).show();
			},
		});
	}
	function showData(data) {
		if (($(".loading-private-notes").addClass("d-none"), 0 !== data.length)) {
			$(".no-private-notes").addClass("d-none");
			let adshow = 0;
			for (let i = 0; i < data.length; i++) {
				var name;
				$(window).width() < 769 &&
					(name = data[i].name.substring(0, 12) + ".."),
					(name = data[i].name);
				let fileType = data[i].fileType,
					id = data[i].uuid,
					size = data[i].size,
					timestamp,
					ago_time = timeDifference(data[i].timestamp),
					actual_size = bytesToSize(size),
					url = data[i].file,
					img = "/images/icons/" + fileType + ".png",
					type = data[i].fileType;
				$(".notes-container-row").append(
					`\n                <div class="col-6 col-lg-2 my-2">\n                    <div class="card border-0 shadow p-0 private-note-item" data-name="${name}" data-id="${id}"  data-time="${ago_time}" data-size="${actual_size}" id="${id}" data-url="${url}" data-type="${type}"  style="height:100%">\n                            \n                            <img class="card-img-top w-50 mx-auto mt-4" src="${img}" /> \n                            <div class="card-body border-0 py-2">\n                               \n                            </div>\n                            <div class="card-footer border-0 bg-white">\n                            <p class="card-title">${name} </p>\n                                <small class="card-text text-muted"> <i class="fa fa-clock mx-1"></i><span> ${ago_time} </span></small>\n\n                                <p class="card-text d-flex align-items-center justify-content-between">\n                                \n                                <span class="text-muted"> \n                                <i class="fa fa-database mx-1">\n                                </i>\n                                <small> ${actual_size} </small>\n                                </span>                                    \n                                </p>\n                            </div>\n                      \n                    \n                    </div>\n                </div>\n                `
				);
			}
			fileOpner();
		} else $(".no-private-notes").removeClass("d-none");
	}
	function timeDifference(previous) {
		const current = Date.now();
		var msPerMinute = 6e4,
			msPerHour = 36e5,
			msPerDay = 864e5,
			msPerMonth = 2592e6,
			msPerYear = 31536e6,
			elapsed = current - previous;
		return elapsed < 6e4
			? Math.round(elapsed / 1e3) + " seconds ago"
			: elapsed < 36e5
			? Math.round(elapsed / 6e4) + " minutes ago"
			: elapsed < 864e5
			? Math.round(elapsed / 36e5) + " hours ago"
			: elapsed < 2592e6
			? Math.round(elapsed / 864e5) + " days ago"
			: elapsed < 31536e6
			? Math.round(elapsed / 2592e6) + " months ago"
			: Math.round(elapsed / 31536e6) + " years ago";
	}
	function bytesToSize(bytes) {
		var sizes = ["Bytes", "KB", "MB", "GB", "TB"];
		if (0 == bytes) return "0 Byte";
		var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
		return Math.round(bytes / Math.pow(1024, i), 2) + " " + sizes[i];
	}
	function openContext() {
		$(".private-note-item").each(function () {
			$(this).on("contextmenu", function (e) {
				e.preventDefault(),
					$(".context-menu").modal("show"),
					$(".modal-dialog").css({
						top: e.pageY - 50 + "px",
						left: e.pageX + 50 + "px",
						position: "absolute",
					});
			});
		});
	}
	function validate() {
		$(".action-note-input").on("input", function () {
			$(this).val().length > 10
				? ($(".action-note-input").addClass("is-valid"),
				  $(".action-note-input").removeClass("is-invalid"))
				: 0 == $(this).val().length
				? ($(".action-note-input").addClass("is-invalid"),
				  $(".action-note-input").removeClass("is-valid"),
				  $(".invalid-name").html("Name can't be empty'"),
				  $(".notes-title").addClass("animate__heartBeat"))
				: ($(".action-note-input").addClass("is-invalid"),
				  $(".action-note-input").removeClass("is-valid"),
				  $(".invalid-name").html("Name should be at least 10 characters"));
		}),
			$(".action-note-input").on("change", function () {
				0 == $(this).val().length &&
					($(".action-note-input").addClass("is-invalid"),
					$(".action-note-input").removeClass("is-valid"),
					$(".invalid-name").html("Name can't be empty'"));
			}),
			$(".action-note-input").on("blur", function () {
				0 == $(this).val().length &&
					($(".action-note-input").addClass("is-invalid"),
					$(".action-note-input").removeClass("is-valid"),
					$(".invalid-name").html("Name can't be empty'"));
			});
	}
	function fileOpner() {
		$(".private-note-item").each(function () {
			$(this).click(function () {
				const parent = $(this).parent(),
					type = $(this).attr("data-type"),
					note_id = $(this).attr("data-id"),
					name = $(this).attr("data-name");
				function showFile(name, type, url) {
					var src;
					$(".private-notes-moda-title").html(name),
						"doc" == type ||
						"csv" == type ||
						"docx" == type ||
						"ppt" == type ||
						"pptx" == type
							? ((src = `<iframe style="display:inline;width:100%;height:100%;" src="https://view.officeapps.live.com/op/embed.aspx?src=${url}" </iframe>`),
							  $(".viewer").html(src))
							: "png" == type || "jpeg" == type || "jpg" == type
							? ((src = `<img src="${url}" > `),
							  $(".viewer").html(
									`<div class="d-flex justify-content-center align-items-center"> ${src} </div>`
							  ))
							: ((src = `<iframe width="100%" height="100%" src="${url}" </iframe>`),
							  $(".viewer").html(src)),
						$("#file-open-modal").modal("show"),
						$(".private-notes-download").click(function () {
							download(url, name);
						});
				}
				$.ajax({
					type: "GET",
					url: app.getApi() + "/notes/" + note_id,
					headers: { Authorization: decodeURIComponent(getCookie("token")) },
					contentType: "application/json",
					processData: !1,
					beforeSend: function () {},
					success: function (data) {
						showFile(data.name, data.type, data.file);
					},
					error: function (errorData) {
						new Noty({
							theme: "sunset",
							type: "error",
							text: "Faild to open file",
							timeout: 4e3,
						}).show();
					},
				}),
					$(".private-notes-delete-btn").click(function () {
						swal({
							title: "Are you sure?",
							text: "Once deleted, you will not be able to recover this Note! ",
							icon: "warning",
							buttons: ["Cancel", "Delete"],
							dangerMode: !0,
						}).then((willDelete) => {
							willDelete &&
								$.ajax({
									type: "DELETE",
									url: app.getApi() + "/notes/" + note_id,
									contentType: "application/json",
									processData: !1,
									headers: { Authorization: getCookie("token") },
									beforeSend: function () {
										$(".private-note-delete-btn").html(
											'<i class="fa fa-spinner fa-spin mx-1"> </i> Please wait ...'
										),
											$(".private-note-delete-btn").prop("disabled", !0);
									},
									success: function (data) {
										$(".private-note-delete-btn").html("Delete"),
											$(".private-note-delete-btn").prop("disabled", !1),
											swal("Success ! Your note deleted succesfully!", {
												icon: "success",
												button: "continue",
											}).then(function () {
												$("#file-open-modal").modal("hide"), $(parent).remove();
											});
									},
									error: function (err) {
										swal(
											"Error!",
											"Somthing went wrong , please try after sometimes",
											"error"
										);
									},
								});
						});
					});
			});
		});
	}
	function download(uri, name) {
		var link = document.createElement("a");
		link.setAttribute("download", name),
			(link.href = uri),
			document.body.appendChild(link),
			link.click(),
			link.remove();
	}
	function getCookie(name) {
		const value = `; ${document.cookie}`,
			parts = value.split(`; ${name}=`);
		if (2 === parts.length) return parts.pop().split(";").shift();
	}
	function setCookie(cname, cvalue, exdays) {
		const d = new Date();
		d.setTime(d.getTime() + 24 * exdays * 60 * 60 * 1e3);
		let expires = "expires=" + d.toUTCString();
		document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
	}
	loaddata(),
		validate(),
		$("form").submit(function (event) {
			event.preventDefault();
			const input = $("input").val();
			0 !== input.length
				? $.ajax({
						type: "GET",
						url: app.getApi() + "/notes/search/" + input,
						headers: { Authorization: getCookie("token") },
						beforeSend: function () {
							$(".loading-private-notes").removeClass("d-none");
						},
						success: function (data) {
							console.log(data), showData(data.notes);
						},
				  })
				: loaddata();
		});
});
